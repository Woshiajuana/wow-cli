#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const home = require('user-home');
const exists = require('fs').existsSync;
const path = require('path');
const inquirer = require('inquirer');
const tildify = require('tildify');
const Metalsmith = require('metalsmith');
const download = require('download-git-repo');
const ora = require('ora');
const rm = require('rimraf').sync;

const logger = require('../lib/logger');
const localPath = require('../lib/local-path');

const isLocalPath = localPath.isLocalPath;
const getTemplatePath = localPath.getTemplatePath;

program
    .usage('<template-name> [project-name]')
    .option('-c, --clone', '使用git克隆')
    .option('-o, --offline', '使用缓存模板')
;

/**
 * Help
 * 显示帮助的
 * */
program.on('--help', () => {
    console.log('  示例:');
    console.log();
    console.log(chalk.gray('    # 使用模板创建新项目'));
    console.log('    $ wow init template my-project');
    console.log();
    console.log(chalk.gray('    # 直接从github模板创建新项目'));
    console.log('    $ wow init username/repo my-project');
    console.log();
});

(function help () {
    program.parse(process.argv);
    if (program.args.length < 1) {
         return program.help();
    }
})();


/**
 * Settings.
 * 读取设置
 * */
// 模板名
let template = program.args[0];
// 判断模板
const hasSlash = template.indexOf('/') > -1;
// 项目名
const rawName = program.args[1];
const inPlace = !rawName || rawName === '.';
// 下载项目
const name = inPlace ? path.relative('../', process.cwd()) : rawName;
// 下载项目路径
const to = path.resolve(rawName || '.');
const clone = program.clone || false;

// 缓存模板存储路径
const tmp = path.join(home, '.wow-templates', template.replace(/[\/:]/g, '-'))
if (program.offline) {
    console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
    template = tmp
}


/**
 * Padding.
 */
console.log();
process.on('exit', () => {
    console.log()
});

if (inPlace || exists(to)) {
    inquirer.prompt([{
        type: 'confirm',
        message: inPlace
            ? '在当前目录中生成项目?'
            : '目标目录存在。继续吗？',
        name: 'ok'
    }]).then(answers => {
        if (answers.ok) {
            run()
        }
    }).catch(logger.fatal)
} else {
    run()
}


/**
 * Check, download and generate the project.
 * 得到参数配置之后，进行操作，简化了下逻辑
 */
function run() {
    if (isLocalPath(template)) {
        // 使用本地缓存模板
        const templatePath = getTemplatePath(template);
        if (exists(templatePath)) {
            generate(name, templatePath, to);
        } else {
            logger.fatal('本地模板 "%s" 没有找到', template)
        }
    } else {
        if (!hasSlash) {
            // 自己 git 账号下拉取模板
            const officialTemplate = 'woshiajuana/' + template;
            downloadAndGenerate(officialTemplate);
        } else {
            // 别人 git 账号下拉取模板
            downloadAndGenerate(template);
        }
    }
}


/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */
function downloadAndGenerate (template) {
    const spinner = ora('正在下载模板');
    spinner.start();
    if (exists(tmp)) rm(tmp);
    download(template, tmp, { clone }, err => {
        spinner.stop();
        if (err) logger.fatal('下载失败 ' + template + ': ' + err.message.trim())
        generate(name, tmp, to)
    });
}


/**
 * 生产模板
 * */
function generate (name, src, dest) {
    const metalsmith = Metalsmith(src);
    Object.assign(metalsmith.metadata(), {
        destDirName: name,
        inPlace: dest === process.cwd(),
        noEscape: true
    });
    metalsmith.clean(false)
        .source('.')
        .destination(dest)
        .build((err, files) => {
            if (err) logger.fatal(err);
            console.log();
            logger.success('生成 "%s".', name)
        });
}
