#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const home = require('user-home');
const exists = require('fs').existsSync;
const path = require('path');
const logger = require('../lib/logger');
const inquirer = require('inquirer');

program
    .usage('<template-name> [project-name]')
    .option('-c, --clone', '使用git克隆')
    .option('--offline', '使用缓存模板')
;

/**
 * Help
 * 显示帮助的
 * */
program.on('--help', () => {
    console.log('  示例:');
    console.log();
    console.log(chalk.gray('    # 使用模板创建新项目'));
    console.log('    $ wow init template my-project');
    console.log();
    console.log(chalk.gray('    # 直接从github模板创建新项目'));
    console.log('    $ wow init username/repo my-project');
    console.log();
});

(function help () {
    program.parse(process.argv);
    if (program.args.length < 1) {
         return program.help();
    }
})();


/**
 * Settings.
 * 读取设置
 * */
// 模板名
let template = program.args[0];
// 判断模板
const hasSlash = template.indexOf('/') > -1;
// 项目名
const rawName = program.args[1];
const inPlace = !rawName || rawName === '.';
// 下载项目路径
const name = inPlace ? path.relative('../', process.cwd()) : rawName;
const to = path.resolve(rawName || '.');
const clone = program.clone || false;

const tmp = path.join(home, '.vue-templates', template.replace(/[\/:]/g, '-'))

console.log('tmp => ', tmp);
/**
 * Padding.
 */

console.log();
process.on('exit', () => {
    console.log()
});

if (inPlace || exists(to)) {
    inquirer.prompt([{
        type: 'confirm',
        message: inPlace
            ? '在当前目录中生成项目?'
            : '目标目录存在。继续吗？',
        name: 'ok'
    }]).then(answers => {
        console.log('answers => ', answers)
        if (answers.ok) {
            run()
        }
    }).catch(logger.fatal)
} else {
    run()
}


/**
 * Check, download and generate the project.
 * 得到参数配置之后，进行操作
 */
function run() {


}
